84c84,85
< void storeTreeAndTemplatesXS(TTree* TT, TString obsName, TString obsBinDn, TString obsBinUp, TString sfinalState, TString fLocation, TString templateNameTag, TString fOption);
---
> void storeTreeAndTemplatesXS(TTree* TT, TH2D* &h2D_m4l_mZ2, TH2D* &h2D_m4l_pT4l, TH2D* &h2D_m4l_eta4l, TH2D* &h2D_m4l_nJets,
>                              TString obsName, TString obsBinDn, TString obsBinUp, TString sfinalState, TString fLocation, TString templateNameTag, TString fOption);
92c93
< int nbinsX=15; const int nbinsY=15;
---
> int nbinsX=20; int nbinsY=20;
98c99,114
< 
---
> //_______________________________________________________________________________________________________________________________________________
> void fiducialXSTemplates(TString processNameTag = "qqZZ", TString processFileName = "ZZTo2e2mu_mZZ95-160.root", TString sfinalState = "4l", TString obsName = "massZ2", TString obsBins = "|12|20|28|35|120|", TString sqrtsTag = "8TeV", TString baseDirXS = "templatesXS", TString sProcessingType = "DTreeXS", TString doZ4l = "false", TString doRatio = "false"){
>     // prepare XS templates for given parameters
>     PROCESSING_TYPE = sProcessingType;
>     templatesDir = baseDirXS;
>     if (doZ4l=="true") {
>         CUT_M4LLOW = 50;
>         CUT_M4LHIGH = 105;
>     }
>     else if (doRatio=="true") {
>         CUT_M4LLOW = 50;
>         CUT_M4LHIGH = 140;
>         nbinsX=45;
>     }
>     templatesXS(processNameTag, processFileName, sqrtsTag, sfinalState, obsName, obsBins, obsBins);
> }
101c117
< void fiducialXSTemplates(TString processNameTag = "qqZZ", TString processFileName = "ZZTo2e2mu_mZZ95-160.root", TString sfinalState = "4l", TString obsName = "massZ2", TString obsBinDn = "0", TString obsBinUp = "120", TString sqrtsTag = "8TeV", TString baseDirXS = "templatesXS", TString sProcessingType = "DTreeXS", TString fitTypeZ4l = "none"){
---
> void fiducialXSTemplates(TString processNameTag = "qqZZ", TString processFileName = "ZZTo2e2mu_mZZ95-160.root", TString sfinalState = "4l", TString obsName = "massZ2", TString obsBinDn = "0", TString obsBinUp = "120", TString sqrtsTag = "8TeV", TString baseDirXS = "templatesXS", TString sProcessingType = "DTreeXS", TString doZ4l = "false", TString doRatio = "false"){
105c121
<     if (fitTypeZ4l=="doZ4l") {
---
>     if (doZ4l=="true") {
109c125
<     else if (fitTypeZ4l=="doRatio") {
---
>     else if (doRatio=="true") {
130c146
<     cout << "[preparing 2D XS templates, process: "+processNameTag+", sqrts: "+sqrtsTag+", fstate: "<<sfinalState<<"]" << "["<<PROCESSING_TYPE<<"]" << "["<<CUT_M4LLOW<<" < m4l < "<<CUT_M4LHIGH<<"]" << endl;
---
>     cout << "[preparing 2D XS templates, process: "+processNameTag+", sqrts: "+sqrtsTag+"]" << "["<<PROCESSING_TYPE<<"]" << endl;
151,153d166
<     int njets_reco_pt30_eta2p5=0, njets_reco_pt30_eta2p5_jesdn=0, njets_reco_pt30_eta2p5_jesup=0;
<     int njets_reco_pt25_eta4p7=0, njets_reco_pt25_eta4p7_jesdn=0, njets_reco_pt25_eta4p7_jesup=0;
<     int njets_reco_pt25_eta2p5=0, njets_reco_pt25_eta2p5_jesdn=0, njets_reco_pt25_eta2p5_jesup=0;
162c175
<     float cosThetaStar, cosTheta1, cosTheta2, Phi, Phi1;
---
>     float cosThetaStar=0.0;
196,204d208
<     if (tree->GetBranch("njets_reco_pt25_eta4p7")) {tree->SetBranchAddress("njets_reco_pt25_eta4p7",&njets_reco_pt25_eta4p7);}
<     if (tree->GetBranch("njets_reco_pt25_eta4p7_jesdn")) {tree->SetBranchAddress("njets_reco_pt25_eta4p7_jesdn",&njets_reco_pt25_eta4p7_jesdn);}
<     if (tree->GetBranch("njets_reco_pt25_eta4p7_jesup")) {tree->SetBranchAddress("njets_reco_pt25_eta4p7_jesup",&njets_reco_pt25_eta4p7_jesup);}
<     if (tree->GetBranch("njets_reco_pt25_eta2p5")) {tree->SetBranchAddress("njets_reco_pt25_eta2p5",&njets_reco_pt25_eta2p5);}
<     if (tree->GetBranch("njets_reco_pt25_eta2p5_jesdn")) {tree->SetBranchAddress("njets_reco_pt25_eta2p5_jesdn",&njets_reco_pt25_eta2p5_jesdn);}
<     if (tree->GetBranch("njets_reco_pt25_eta2p5_jesup")) {tree->SetBranchAddress("njets_reco_pt25_eta2p5_jesup",&njets_reco_pt25_eta2p5_jesup);}
<     if (tree->GetBranch("njets_reco_pt30_eta2p5")) {tree->SetBranchAddress("njets_reco_pt30_eta2p5",&njets_reco_pt30_eta2p5);}
<     if (tree->GetBranch("njets_reco_pt30_eta2p5_jesdn")) {tree->SetBranchAddress("njets_reco_pt30_eta2p5_jesdn",&njets_reco_pt30_eta2p5_jesdn);}
<     if (tree->GetBranch("njets_reco_pt30_eta2p5_jesup")) {tree->SetBranchAddress("njets_reco_pt30_eta2p5_jesup",&njets_reco_pt30_eta2p5_jesup);}
206,209d209
<     if (tree->GetBranch("cosTheta1")) {tree->SetBranchAddress("cosTheta1",&cosTheta1);}
<     if (tree->GetBranch("cosTheta2")) {tree->SetBranchAddress("cosTheta2",&cosTheta2);}
<     if (tree->GetBranch("Phi")) {tree->SetBranchAddress("Phi",&Phi);}
<     if (tree->GetBranch("Phi1")) {tree->SetBranchAddress("Phi1",&Phi1);}
216d215
< 
232,240d230
<     TT->Branch("njets_reco_pt30_eta2p5",&njets_reco_pt30_eta2p5,"njets_reco_pt30_eta2p5/I");
<     TT->Branch("njets_reco_pt30_eta2p5_jesup",&njets_reco_pt30_eta2p5_jesup,"njets_reco_pt30_eta2p5_jesup/I");
<     TT->Branch("njets_reco_pt30_eta2p5_jesdn",&njets_reco_pt30_eta2p5_jesdn,"njets_reco_pt30_eta2p5_jesdn/I");
<     TT->Branch("njets_reco_pt25_eta2p5",&njets_reco_pt25_eta2p5,"njets_reco_pt25_eta2p5/I");
<     TT->Branch("njets_reco_pt25_eta2p5_jesup",&njets_reco_pt25_eta2p5_jesup,"njets_reco_pt25_eta2p5_jesup/I");
<     TT->Branch("njets_reco_pt25_eta2p5_jesdn",&njets_reco_pt25_eta2p5_jesdn,"njets_reco_pt25_eta2p5_jesdn/I");
<     TT->Branch("njets_reco_pt25_eta4p7",&njets_reco_pt25_eta4p7,"njets_reco_pt25_eta4p7/I");
<     TT->Branch("njets_reco_pt25_eta4p7_jesup",&njets_reco_pt25_eta4p7_jesup,"njets_reco_pt25_eta4p7_jesup/I");
<     TT->Branch("njets_reco_pt25_eta4p7_jesdn",&njets_reco_pt25_eta4p7_jesdn,"njets_reco_pt25_eta4p7_jesdn/I");
246,249d235
<     TT->Branch("cosTheta1",&cosTheta1,"cosTheta1/F");
<     TT->Branch("cosTheta2",&cosTheta2,"cosTheta2/F");
<     TT->Branch("Phi",&Phi,"Phi/F");
<     TT->Branch("Phi1",&Phi1,"Phi1/F");
326c312
<         h2D_m4l_nJets->Fill(mass4l, njets_reco_pt30_eta4p7, weight);
---
>         h2D_m4l_nJets->Fill(mass4l, nJets, weight);
328,331c314
<         // apply ggZZ weight if needed
<         kfactor_ggZZ = getGluGluZZKFactor(mass4l); // ggZZ with K-factor
<         if (processNameTag == "ggZZ") weight = weight * kfactor_ggZZ;
<         // store variables in the tree
---
>         // compute additional variables to store in the tree
332a316
>         kfactor_ggZZ = getGluGluZZKFactor(mass4l); // ggZZ with K-factor
